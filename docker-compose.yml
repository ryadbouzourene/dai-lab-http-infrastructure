networks:
  bdr-net:
    driver: overlay
    attachable: true  # Permet à d'autres conteneurs de se connecter dynamiquement au réseau

services:
  # Service Reverse Proxy (Traefik)
  reverse_proxy:
    image: traefik:v3.3

    command:
      # Définit les points d'entrée HTTP et HTTPS
      - "--entrypoints.web.address=:80"       # Point d'entrée HTTP
      - "--entrypoints.websecure.address=:443" # Point d'entrée HTTPS

      # Active la détection des services Docker
      - "--providers.docker=true"

      # Active et sécurise le tableau de bord Traefik
      - "--api=true"
      - "--api.dashboard=true"

      # Configure ACME pour gérer les certificats TLS
      - "--certificatesresolvers.default.acme.tlschallenge=true"
      - "--certificatesresolvers.default.acme.email=example@example.com" # Remplacez par votre email
      - "--certificatesresolvers.default.acme.storage=/etc/traefik/acme.json"
    ports:
      - "80:80"    # Port public pour HTTP
      - "443:443"  # Port public pour HTTPS
      - "8080:8080" # Port public pour le tableau de bord Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Permet à Traefik d'interagir avec l'API Docker
      - ./traefik.yaml:/etc/traefik/traefik.yaml     # Monte le fichier de configuration de Traefik
      - ./certificates:/etc/traefik/certificates     # Monte les certificats auto-signés
      - ./acme.json:/etc/traefik/acme.json           # Stocke les informations liées aux certificats
    networks:
      - bdr-net

  # Serveur web statique
  static-web:
    image: static-web:latest
    deploy:
      replicas: 3  # Crée trois instances pour équilibrage de charge
      restart_policy:
        condition: on-failure  # Redémarre en cas d'échec
    networks:
      - bdr-net
    labels:
      # Active Traefik pour ce service
      - "traefik.enable=true"

      # Route tout trafic vers localhost (HTTPS activé)
      - "traefik.http.routers.static.rule=Host(`localhost`)"
      - "traefik.http.routers.static.entrypoints=websecure"
      - "traefik.http.routers.static.tls=true"

      # Port interne exposé par le conteneur
      - "traefik.http.services.static.loadbalancer.server.port=80"

  # Serveur d'API dynamique
  api-server:
    image: api-server:latest
    depends_on:
      - postgresql  # Dépend de PostgreSQL pour démarrer
    deploy:
      replicas: 3  # Trois instances pour répartir la charge
      restart_policy:
        condition: on-failure
    networks:
      - bdr-net
    labels:
      # Active Traefik pour ce service
      - "traefik.enable=true"

      # Route les requêtes vers /api
      - "traefik.http.routers.api.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls=true"

      # Port interne exposé par le conteneur
      - "traefik.http.services.api.loadbalancer.server.port=80"

      # Active les sessions persistantes avec cookies
      - "traefik.http.services.api.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.api.loadbalancer.sticky.cookie.name=api-session"

  # Base de données PostgreSQL
  postgresql:
    image: 'bitnami/postgresql:17'
    environment:
      - POSTGRESQL_USERNAME=bdr  # Utilisateur par défaut
      - POSTGRESQL_PASSWORD=bdr  # Mot de passe utilisateur
      - POSTGRESQL_DATABASE=bdr  # Nom de la base de données
      - POSTGRESQL_POSTGRES_PASSWORD=root  # Mot de passe administrateur
    ports:
      - "5432:5432"  # Port pour accéder à la base de données
    volumes:
      - .:/data:ro  # Monte un dossier local en lecture seule
      - ./init-scripts:/docker-entrypoint-initdb.d  # Scripts d'initialisation
    networks:
      - bdr-net
