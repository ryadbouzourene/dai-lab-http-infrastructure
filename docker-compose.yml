networks:
  bdr-net:
    driver: overlay       # Réseau de type overlay (Swarm ou attachable)
    attachable: true      # Permet à d’autres conteneurs externes de s’y connecter

services:
  # ========================
  # Traefik (Reverse Proxy)
  # ========================
  reverse_proxy:
    image: traefik:v3.3
    ports:
      - "80:80"     # Expose le port HTTP
      - "443:443"   # Expose le port HTTPS
      - "8080:8080" # Expose le port pour le dashboard Traefik en HTTPS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro      # Permet à Traefik de lire les infos Docker
      - ./traefik.yaml:/etc/traefik/traefik.yaml:ro       # Fichier de config statique de Traefik
      - ./certificates:/etc/traefik/certificates:ro       # Dossier contenant les certificats TLS
    networks:
      - bdr-net
    labels:
      - "traefik.enable=true"                              # Active la prise en compte de ce service par Traefik

      # Router pour le dashboard, accessible en HTTPS via l’entrypoint "dashboard"
      - "traefik.http.routers.traefik-dashboard.rule=Host(`localhost`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=dashboard"
      - "traefik.http.routers.traefik-dashboard.tls=true"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"  # Service interne du dashboard

  # ========================
  # Site web statique
  # ========================
  static-web:
    image: static-web:latest
    deploy:
      replicas: 3                      # Lance 3 instances du conteneur
      restart_policy:
        condition: on-failure          # Redémarre en cas d’échec
    networks:
      - bdr-net
    labels:
      - "traefik.enable=true"          # Expose ce service via Traefik

      # Routage HTTP
      - "traefik.http.routers.static.rule=Host(`static-website.localhost`)"
      - "traefik.http.routers.static.entrypoints=web"

      # Routage HTTPS
      - "traefik.http.routers.static.tls=true"
      - "traefik.http.routers.static.entrypoints=websecure"

      # Définit le port interne du conteneur écouté par Traefik
      - "traefik.http.services.static.loadbalancer.server.port=80"

  # ========================
  # Frontend app diététique
  # ========================
  react-frontend:
    image: react-frontend:latest
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    networks:
      - bdr-net
    labels:
      - "traefik.enable=true"

      # Routage HTTP
      - "traefik.http.routers.front.rule=Host(`localhost`)"
      - "traefik.http.routers.front.entrypoints=web"

      # Routage HTTPS
      - "traefik.http.routers.front.tls=true"
      - "traefik.http.routers.front.entrypoints=websecure"

      # Port interne du conteneur (port Nginx)
      - "traefik.http.services.front.loadbalancer.server.port=80"

  # ========================
  # Serveur API
  # ========================
  api-server:
    image: api-server:latest
    depends_on:
      - postgresql                     # Démarre l’API après la base de données
    deploy:
      replicas: 3                      # Lance 3 instances du conteneur
      restart_policy:
        condition: on-failure
    networks:
      - bdr-net
    labels:
      - "traefik.enable=true"

      # Routage HTTP
      - "traefik.http.routers.api.rule=Host(`localhost`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=web"

      # Routage HTTPS
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.routers.api.entrypoints=websecure"

      # Définit le port interne pour l’API
      - "traefik.http.services.api.loadbalancer.server.port=80"

      # Sticky sessions pour l’API (équilibrage basé sur un cookie)
      - "traefik.http.services.api.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.api.loadbalancer.sticky.cookie.name=api-session"

  # ========================
  # Base de données
  # ========================
  postgresql:
    image: 'bitnami/postgresql:17'
    environment:
      - POSTGRESQL_USERNAME=bdr
      - POSTGRESQL_PASSWORD=bdr
      - POSTGRESQL_DATABASE=bdr
      - POSTGRESQL_POSTGRES_PASSWORD=root
    ports:
      - "5432:5432"                    # Expose Postgres localement
    volumes:
      - .:/data:ro                     # Montage en lecture seule (exemple)
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - bdr-net

  # ========================
  # Portainer (Management UI)
  # ========================
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    ports:
      - "9000:9000"                       # Expose le port HTTP
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Permet à Portainer de communiquer avec Docker via le socket local
      - portainer_data:/data                       # Volume pour stocker les données internes de Portainer
    restart: unless-stopped                        # Redémarre automatiquement sauf si manuellement arrêté
    networks:
      - bdr-net                                    # Utilise le même réseau que les autres services

volumes:
  portainer_data:  # Volume nommé pour stocker les données de Portainer
